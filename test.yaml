---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multi-card-argoworkflows-workflow-controller
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multi-card-argoworkflows-server
---
# Source: k8s-bootstrap-wrapper/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-boot-strapper
  labels:
    helm.sh/chart: k8s-bootstrap-wrapper-0.1.0
    app.kubernetes.io/name: k8s-bootstrap-wrapper
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: multi-card-argoworkflows-workflow-controller-configmap
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-cm
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
data:
  config: |
    containerRuntimeExecutor: pns
---
# Source: k8s-bootstrap-wrapper/templates/chart-values.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-chart-values
  labels:
    part-of: argocd-chart-values
data:
  chart-values.yaml: |
    installCRDs: "false"
    dex:
      enabled: false
    server:
      replicas: 1
      extraArgs:
        - --insecure
      ingress:
        enabled: true
        hosts:
          - argocd.public.k8s.local
        paths:
          - /
      config:
        url: https://argocd.public.k8s.local
        repositories: |
          - type: helm
            name: argo-platform
            url: https://argoproj.github.io/argo-helm
          - type: helm
            name: bitnami
            url: https://charts.bitnami.com/bitnami
          - type: helm
            name: prometheus-community
            url: https://prometheus-community.github.io/helm-charts
        users.anonymous.enabled: "true"
        users.session.duration: "24h"
        accounts.operator: login, apiKey
        policy.default: role:readonly
        policy.csv: |-
          p, user:operator, applications, get, */*, allow
          p, user:operator, applications, sync, */*, allow
          p, user:operator, projects, get, * , allow
          p, user:operator, *, actions, * , allow
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-aggregate-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-view
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-aggregate-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-edit
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-aggregate-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-admin
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  - workfloweventbindings
  - workfloweventbindings/finalizers
  - workflowtemplates
  - workflowtemplates/finalizers
  - cronworkflows
  - cronworkflows/finalizers
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-workflow-controller
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-workflow-controller
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - create
  - delete
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
  - create
- apiGroups:
  - argoproj.io
  resources:
  - workflowtemplates
  - workflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - cronworkflows
  - cronworkflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - get
  - list
- apiGroups:
  - "policy"
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - get
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  resourceNames:
  - workflow-controller
  - workflow-controller-lease
  verbs:
  - get
  - watch
  - update
  - patch
  - delete
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-workflow-controller-cluster-template
rules:
- apiGroups:
  - argoproj.io
  resources:
  - clusterworkflowtemplates
  - clusterworkflowtemplates/finalizers
  verbs:
  - get
  - list
  - watch
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-server
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - events
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - pods/log
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - watch
  - create
  - patch
- apiGroups:
    - argoproj.io
  resources:
    - eventsources
    - sensors
    - workflows
    - workfloweventbindings
    - workflowtemplates
    - cronworkflows
  verbs:
    - create
    - get
    - list
    - watch
    - update
    - patch
    - delete
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: multi-card-argoworkflows-server-cluster-template
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
rules:
- apiGroups:
  - argoproj.io
  resources:
  - clusterworkflowtemplates
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multi-card-argoworkflows-workflow-controller
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-workflow-controller
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-card-argoworkflows-workflow-controller
subjects:
  - kind: ServiceAccount
    name: multi-card-argoworkflows-workflow-controller
    namespace: argo-workflows
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multi-card-argoworkflows-workflow-controller-cluster-template
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-workflow-controller
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-card-argoworkflows-workflow-controller-cluster-template
subjects:
  - kind: ServiceAccount
    name: multi-card-argoworkflows-workflow-controller
    namespace: argo-workflows
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multi-card-argoworkflows-server
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-card-argoworkflows-server
subjects:
- kind: ServiceAccount
  name: multi-card-argoworkflows-server
  namespace: argo-workflows
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multi-card-argoworkflows-server-cluster-template
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multi-card-argoworkflows-server-cluster-template
subjects:
- kind: ServiceAccount
  name: multi-card-argoworkflows-server
  namespace: argo-workflows
---
# Source: k8s-bootstrap-wrapper/templates/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-bootstrapper-admin
  labels:
    helm.sh/chart: k8s-bootstrap-wrapper-0.1.0
    app.kubernetes.io/name: k8s-bootstrap-wrapper
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: cluster-boot-strapper
  namespace: argo-workflows
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: multi-card-argoworkflows-workflow
  namespace: default
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: multi-card-argoworkflows-workflow
  namespace: argo-workflows
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - watch
      - patch
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
      - watch
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-rb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: multi-card-argoworkflows-workflow
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: multi-card-argoworkflows-workflow
subjects:
  - kind: ServiceAccount
    name: argo-workflow
    namespace: default
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-rb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: multi-card-argoworkflows-workflow
  namespace: argo-workflows
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: multi-card-argoworkflows-workflow
subjects:
  - kind: ServiceAccount
    name: argo-workflow
    namespace: argo-workflows
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: multi-card-argoworkflows-server
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/version: "v3.2.0"
spec:
  ports:
  - port: 2746
    targetPort: 2746
  selector:
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
  sessionAffinity: None
  type: ClusterIP
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/controller/workflow-controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multi-card-argoworkflows-workflow-controller
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-workflow-controller
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: workflow-controller
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/version: "v3.2.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argoworkflows-workflow-controller
      app.kubernetes.io/instance: multi-card
  template:
    metadata:
      labels:
        helm.sh/chart: argoworkflows-0.8.1
        app.kubernetes.io/name: argoworkflows-workflow-controller
        app.kubernetes.io/instance: multi-card
        app.kubernetes.io/component: workflow-controller
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argo-workflows
        app.kubernetes.io/version: "v3.2.0"
    spec:
      serviceAccountName: multi-card-argoworkflows-workflow-controller
      containers:
        - name: controller
          image: "quay.io/argoproj/workflow-controller:v3.2.0"
          imagePullPolicy: Always
          command: [ "workflow-controller" ]
          args:
          - "--configmap"
          - "multi-card-argoworkflows-workflow-controller-configmap"
          - "--executor-image"
          - "quay.io/argoproj/argoexec:v3.2.0"
          - "--loglevel"
          - "info"
          - "--gloglevel"
          - "0"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          env:
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: LEADER_ELECTION_IDENTITY
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          resources:
            {}
          ports:
            - name: metrics
              containerPort: 9090
            - containerPort: 6060
          livenessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6060
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 30
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multi-card-argoworkflows-server
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
    app.kubernetes.io/version: "v3.2.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: argoworkflows-server
      app.kubernetes.io/instance: multi-card
  template:
    metadata:
      labels:
        helm.sh/chart: argoworkflows-0.8.1
        app.kubernetes.io/name: argoworkflows-server
        app.kubernetes.io/instance: multi-card
        app.kubernetes.io/component: server
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: argo-workflows
        app.kubernetes.io/version: "v3.2.0"
    spec:
      serviceAccountName: multi-card-argoworkflows-server
      containers:
        - name: argo-server
          image: "quay.io/argoproj/argocli:v3.2.0"
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
          args:
          - server
          - --configmap=multi-card-argoworkflows-workflow-controller-configmap
          - --auth-mode=server
          - "--secure=false"
          ports:
          - name: web
            containerPort: 2746
          readinessProbe:
            httpGet:
              path: /
              port: 2746
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 20
          env:
            - name: IN_CLUSTER
              value: "true"
            - name: ARGO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BASE_HREF
              value: "/"
          resources:
            {}
          volumeMounts:
          - name: tmp
            mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: k8s-bootstrap-wrapper/charts/argoworkflows/templates/server/server-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    0: "map[ingress.kubernetes.io/protocol:http]"
  name: multi-card-argoworkflows-server
  labels:
    helm.sh/chart: argoworkflows-0.8.1
    app.kubernetes.io/name: argoworkflows-server
    app.kubernetes.io/instance: multi-card
    app.kubernetes.io/component: server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: argo-workflows
spec:
  rules:
    - host: argoworkflow.public.k8s.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: multi-card-argoworkflows-server
                port:
                  number: 2746
---
# Source: k8s-bootstrap-wrapper/templates/argo-workflow-templates.yaml
# This is a YAML-formatted file.
---
# Source: k8s-bootstrap-wrapper/templates/workflow-of-workflows.wf.yaml
# This template demonstrates a workflow of workflows.
# Workflow triggers one or more workflow and manage it.
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: workflow-of-workflows
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    #"helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook-weight": "200"
spec:
  entrypoint: main
  serviceAccountName: "cluster-boot-strapper"
  securityContext:
    runAsNonRoot: true
    runAsUser: 10010
  arguments:
    parameters:
    - name: namespaces
      value: |
        [{"annotations":{"my":"annotation"},"labels":{"iam":"working","soami":"yes"},"name":"test"},{"annotations":{"my":"annotation"},"labels":{"istio-injection":"enabled"},"name":"test2"},{"annotations":{},"labels":{"istio-injection":"enabled"},"name":"test3"},{"annotations":{"name":"random"},"labels":{"istio-injection":"enabled"},"name":"test4"},{"annotations":{"name":"random"},"labels":{"istio-injection":"enabled"},"name":"test5"}]
    - name: argocd-helm
      value: |
        [
        {"chartName":"argo-cd","chartVersion":"~3.26.1","chartsUrl":"https://argoproj.github.io/argo-helm","configMapName":"argocd-chart-values","namespace":"argo-cd","releaseName":"son-of-workflow"} ]
    - name: argoworkflowsHelm
      value: |
       [ 
        {"chartName":"argo-workflows","chartVersion":"~0.8.0","chartsUrl":"https://argoproj.github.io/argo-helm","namespace":"argo-workflows","releaseName":"multi-card"} ]
  templates:
    - name: main
      steps:
      - - name: namespace-setup
          templateRef: 
            name: "namespace-template"
            template: "main"
          arguments:
            parameters:
            - name: name
              value: "{{item.name}}"
            - name: annotations
              value: "{{item.annotations}}"
            - name: labels
              value: "{{item.labels}}"
          withParam: "{{workflow.parameters.namespaces}}"
      - - name: deploy-argocd-chart
          templateRef: 
            name: helm-template
            template: main
          arguments:
            parameters:
              - name: releaseName
                value: "{{item.releaseName}}"
              - name: chart
                value: "{{item.chartName }}"
              - name: namespace
                value: "{{item.namespace}}"
              - name: version
                value: "{{item.chartVersion}}"
              - name: url
                value: "{{item.chartsUrl}}"
              - name: configMapName
                value: "{{item.configMapName}}"
          withParam: "{{workflow.parameters.argocd-helm}}"
      - - name: deploy-argocd-app
          templateRef: 
            name: argocd-app-template
            template: main
          arguments:
            parameters:
              - name: argoProject
                value: "default"
              - name: argoNamespace
                value: "argo-cd"
              - name: argoLabels
                value: |
                  {}
              - name: targetCluster
                value: "https://kubernetes.default.svc"
              - name: targetNamespace
                value: "{{item.namespace}}"
              - name: helmReleaseName
                value: "{{item.releaseName}}"
              - name: helmChartName
                value: "{{item.chartName }}"
              - name: helmTargetRevision
                value: "{{item.chartVersion}}"
              - name: helmRepoUrl
                value: "{{item.chartsUrl}}"
              - name: helmValues
                value: |
                  {"dex":{"enabled":false},"installCRDs":"false","server":{"config":{"accounts.operator":"login, apiKey","policy.csv":"p, user:operator, applications, get, */*, allow\np, user:operator, applications, sync, */*, allow\np, user:operator, projects, get, * , allow\np, user:operator, *, actions, * , allow","policy.default":"role:readonly","repositories":"- type: helm\n  name: argo-platform\n  url: https://argoproj.github.io/argo-helm\n- type: helm\n  name: bitnami\n  url: https://charts.bitnami.com/bitnami\n- type: helm\n  name: prometheus-community\n  url: https://prometheus-community.github.io/helm-charts\n","url":"https://argocd.public.k8s.local","users.anonymous.enabled":"true","users.session.duration":"24h"},"extraArgs":["--insecure"],"ingress":{"enabled":true,"hosts":["argocd.public.k8s.local"],"paths":["/"]},"replicas":1}}
          withParam: "{{workflow.parameters.argocd-helm}}"
      - - name: deploy-argoworkflow-app
          templateRef: 
            name: argocd-app-template
            template: main
          arguments:
            parameters:
              - name: argoProject
                value: "default"
              - name: argoNamespace
                value: "argo-workflows"
              - name: argoLabels
                value: |
                  {}
              - name: targetCluster
                value: "https://kubernetes.default.svc"
              - name: targetNamespace
                value: "{{item.namespace}}"
              - name: helmReleaseName
                value: "{{item.releaseName}}"
              - name: helmChartName
                value: "{{item.chartName }}"
              - name: helmTargetRevision
                value: "{{item.chartVersion}}"
              - name: helmRepoUrl
                value: "{{item.chartsUrl}}"
              - name: helmValues
                value: |
                  {"artifactRepository":{"archiveLogs":false,"s3":{"accessKeySecret":{"key":"accesskey"},"insecure":true,"secretKeySecret":{"key":"secretkey"}}},"controller":{"affinity":{},"clusterWorkflowTemplates":{"enabled":true},"containerRuntimeExecutor":"pns","extraArgs":[],"extraContainers":[],"extraEnv":[],"image":{"registry":"quay.io","repository":"argoproj/workflow-controller","tag":""},"initialDelay":null,"instanceID":{"enabled":false},"links":[],"livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":6060},"initialDelaySeconds":90,"periodSeconds":60,"timeoutSeconds":30},"loadBalancerSourceRanges":[],"logging":{"globallevel":"0","level":"info"},"metricsConfig":{"enabled":false,"path":"/metrics","port":9090,"portName":"metrics","servicePort":8080,"servicePortName":"metrics"},"name":"workflow-controller","namespaceParallelism":null,"nodeSelector":{"kubernetes.io/os":"linux"},"parallelism":null,"pdb":{"enabled":false},"persistence":{},"podAnnotations":{},"podLabels":{},"podSecurityContext":{},"priorityClassName":"","replicas":1,"resources":{},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true},"serviceAccount":{"annotations":{},"create":true,"name":""},"serviceAnnotations":{},"serviceLabels":{},"serviceMonitor":{"additionalLabels":{},"enabled":false},"serviceType":"ClusterIP","telemetryConfig":{"enabled":false,"path":"/telemetry","port":8081,"servicePort":8081,"servicePortName":"telemetry"},"tolerations":[],"workflowDefaults":{},"workflowNamespaces":["default"],"workflowRestrictions":{}},"createAggregateRoles":true,"enabled":false,"executor":{"env":{},"image":{"registry":"quay.io","repository":"argoproj/argoexec","tag":""},"resources":{},"securityContext":{}},"fullnameOverride":null,"global":{"serviceAccount":{"name":"cluster-boot-strapper"}},"images":{"pullPolicy":"Always","pullSecrets":[]},"kubeVersionOverride":"","nameOverride":null,"server":{"affinity":{},"baseHref":"/","clusterWorkflowTemplates":{"enableEditing":true,"enabled":true},"enabled":true,"extraArgs":["--auth-mode=server"],"extraContainers":[],"extraEnv":[],"image":{"registry":"quay.io","repository":"argoproj/argocli","tag":""},"ingress":{"annotations":[{"ingress.kubernetes.io/protocol":"http"}],"enabled":true,"extraPaths":[],"hosts":["argoworkflow.public.k8s.local"],"https":false,"ingressClassName":"","labels":{},"pathType":"Prefix","paths":["/"],"tls":[]},"loadBalancerIP":"","loadBalancerSourceRanges":[],"name":"server","nodeSelector":{"kubernetes.io/os":"linux"},"pdb":{"enabled":false},"podAnnotations":{},"podLabels":{},"podSecurityContext":{},"priorityClassName":"","replicas":1,"resources":{},"secure":false,"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true},"serviceAccount":{"annotations":{},"create":true,"name":""},"serviceAnnotations":{},"serviceLabels":{},"servicePort":2746,"serviceType":"ClusterIP","sso":null,"tolerations":[],"volumeMounts":[],"volumes":[]},"singleNamespace":false,"useDefaultArtifactRepo":false,"useStaticCredentials":true,"workflow":{"namespace":null,"rbac":{"create":true},"serviceAccount":{"annotations":{"eks.amazonaws.com/role-arn":"arn:aws:iam::054273887971:role/baas-argo-workflow-service-account"},"create":false,"name":"argo-workflow"}}}
          withParam: "{{workflow.parameters.argoworkflowsHelm}}"
---
# Source: k8s-bootstrap-wrapper/templates/argo-workflow-templates.yaml
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: argocd-app-template
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "150"
    #"helm.sh/hook-delete-policy": before-hook-creation
spec:
  entrypoint: main
  securityContext:
    runAsNonRoot: true
    runAsUser: 10010
############# Workflow Definition #################
  templates:
  - name: main
    inputs:
      parameters:
      - name: argoProject
      - name: argoNamespace
      - name: argoLabels
      - name: targetCluster
      - name: targetNamespace
      - name: helmRepoUrl
      - name: helmChartName
      - name: helmTargetRevision
      - name: helmReleaseName
      - name: helmValues
    resource:
      action: apply
      manifest: |
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: {{inputs.parameters.helmReleaseName}}-{{inputs.parameters.helmChartName}}-{{inputs.parameters.argoProject}}
          namespace: {{inputs.parameters.argoNamespace}}
          labels:
            {{inputs.parameters.argoLabels}}
        spec:
          destination:
            server: {{inputs.parameters.targetCluster}}
            namespace: {{inputs.parameters.targetNamespace}}
          project: {{inputs.parameters.argoProject}}
          source:
            repoURL: {{inputs.parameters.helmRepoUrl}}
            chart: {{inputs.parameters.helmChartName}}
            targetRevision: {{inputs.parameters.helmTargetRevision}}
            helm:
              releaseName: {{inputs.parameters.helmReleaseName}}
              values: |
                {{inputs.parameters.helmValues}}
          syncPolicy: {}
---
# Source: k8s-bootstrap-wrapper/templates/argo-workflow-templates.yaml
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: helm-template
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "150"
    #"helm.sh/hook-delete-policy": before-hook-creation
spec:
  entrypoint: main
  securityContext:
    runAsNonRoot: true
    runAsUser: 10010

############# inputs Definition #################
  templates:
  - name: main
    inputs:
      parameters:
      - name: releaseName
      - name: chart
      - name: namespace
      - name: version
      - name: url
      - name: configMapName
      - name: repoName
        value: repo
    initContainers:
    - name: registy-add
      image: alpine/helm
      env:
      - name: HELM_CACHE_HOME
        value: /tmp/.helm/cache
      - name: HELM_CONFIG_HOME
        value: /tmp/.helm/config
      command: ["helm"]
      args:
       - "repo"
       - "add"
       - "{{inputs.parameters.repoName}}"
       - "{{inputs.parameters.url}}"
      mirrorVolumeMounts: true
    container:
      image: alpine/helm
      env:
      - name: HELM_CACHE_HOME
        value: /tmp/.helm/cache
      - name: HELM_CONFIG_HOME
        value: /tmp/.helm/config
      command: [ "helm" ]
      args: 
        - "upgrade"
        - "--install"
        - "{{inputs.parameters.releaseName}}"
        - "{{inputs.parameters.repoName}}/{{inputs.parameters.chart}}"
        - "--wait"
        - "-n"
        - "{{inputs.parameters.namespace}}"
        - "--create-namespace=true"
        - "--version"
        - "{{inputs.parameters.version}}"
        - "-f"
        - "/tmp/yaml/chart-values.yaml"
        - "--debug"
        - "--timeout"
        - "600s"
      volumeMounts:
      - name: cache
        mountPath: /tmp/.helm
      - name: config-yaml
        mountPath: /tmp/yaml
    volumes:
    - name: cache
      emptyDir: {}
    - name: config-yaml
      configMap:
        name: "{{inputs.parameters.configMapName}}"
---
# Source: k8s-bootstrap-wrapper/templates/argo-workflow-templates.yaml
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: namespace-template
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "150"
    #"helm.sh/hook-delete-policy": before-hook-creation
spec:
  entrypoint: main
  securityContext:
    runAsNonRoot: true
    runAsUser: 10010

############# Workflow Definition #################
  templates:
  - name: main
    inputs:
      parameters:
      - name: name
      - name: labels
      - name: annotations
    resource:
      action: apply
      manifest: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: {{inputs.parameters.name}}
          labels:
            {{inputs.parameters.labels}}
          annotations:
            {{inputs.parameters.annotations}}
